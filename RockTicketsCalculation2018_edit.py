# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# RockTicketsCalculation2016Update1.py
# Created on: 2016-02-02 10:51:22.00000
#   (generated by ArcGIS/ModelBuilder and customized)
# Description: 
# ---------------------------------------------------------------------------
#This script is for the updating of the rock tickets data from excel sheets containing rock tickets information input by Secondary Roads department Staff(currently as of Feb, 2018 is Tara Youngers)
# Set the necessary product code
import arcpy


if arcpy.CheckProduct("ArcInfo") == "Available":
    import arcinfo
elif arcpy.CheckProduct("ArcEditor") == "Available":
    import arceditor
else:
    print("None of the Info or Editor licenses are available")
# Import arcpy module


# Set Geoprocessing environments
arcpy.env.newPrecision = "SINGLE"
arcpy.env.autoCommit = "1000"
arcpy.env.XYDomain = ""
arcpy.env.scratchWorkspace = "\\\\srv-chs-efs-02\\county\\GIS\\Secondary_Roads\\Projects\\Rock Motor Grader Districts\\RockUsageProjectData\\RockUsagePavedGravel.gdb"
arcpy.env.cartographicPartitions = ""
arcpy.env.outputCoordinateSystem = ""
arcpy.env.ZDomain = ""
arcpy.env.transferDomains = "false"
arcpy.env.snapRaster = ""
arcpy.env.projectCompare = "NONE"
arcpy.env.cartographicCoordinateSystem = ""
arcpy.env.configKeyword = ""
arcpy.env.qualifiedFieldNames = "true"
arcpy.env.referenceScale = ""
arcpy.env.extent = "DEFAULT"
arcpy.env.MDomain = ""
arcpy.env.spatialGrid1 = "0"
arcpy.env.geographicTransformations = ""
arcpy.env.spatialGrid2 = "0"
arcpy.env.spatialGrid3 = "0"
arcpy.env.maintainSpatialIndex = "false"
arcpy.env.workspace = "\\\\srv-chs-efs-02\\county\\GIS\\Secondary_Roads\\Projects\\Rock Motor Grader Districts\\RockUsageProjectData\\RockUsagePavedGravel.gdb"
arcpy.env.derivedPrecision = "HIGHEST"
arcpy.env.overwriteOutput ="True"

#input variables:
Year_Edit=arcpy.GetParameterAsText(0)
arcpy.AddMessage( "this GP process will update the "+Year_Edit+" year's rock tickets")

# Local variables:
RockTicketsSR = "RockTicketsSR"
Rock_Gravel = "Rock_Usage_Paved_Gravel\\Rock_Gravel"
Rock_Shoulder_Left = "Rock_Usage_Paved_Gravel\\Rock_Shoulder_Left"
Rock_Shoulder_Right = "Rock_Usage_Paved_Gravel\\Rock_Shoulder_Right"

SumStatstoPython = "..\\sumstatsresults.gdb\\SumStats"+Year_Edit+"toPython"
QueryTable1 = "QueryTable1"
QueryTable_CopyRows = "QueryTable"+Year_Edit+"_CopyRows"
Rock_Shoulder_Right_QueryTable_CopyRows = "Rock_Usage_Paved_Gravel\\Rock_Shoulder_Right_QueryTable"+Year_Edit+"_CopyRows"
Rock_Shoulder_Left_QueryTable_CopyRows = "Rock_Usage_Paved_Gravel\\Rock_Shoulder_Left_QueryTable"+Year_Edit+"_CopyRows"
Rock_GravelnoLock_QueryTable_CopyRows = "Rock_Usage_Paved_Gravel\\Rock_GravelnoLock_QueryTable"+Year_Edit+"_CopyRows"

RockTicketsSRodbc = "Database Connections\\RockTickets.odc\\RockTicketsSR"
RockUsagePavedGravel_gdb = arcpy.env.workspace


# Move data from Odc connection(Access database) to File geodatabase feature class RockTicketsSR.
# Process: Table to Table
arcpy.TableToTable_conversion(RockTicketsSRodbc, RockUsagePavedGravel_gdb, "RockTicketsSR", "", "", "")



arcpy.AddMessage( "finished moving data from access database to RockTicketsSR in file geodatabase")
# Process: Delete Field (4)
arcpy.DeleteField_management(Rock_Shoulder_Right, "RockTicketsSR_PROJ_Num;FREQUENCY;SUM_RockTicketsSR_ENGLISH_TONS;SUM_RockTicketsSR_AMT")

# Process: Delete Field (5)
arcpy.DeleteField_management(RockTicketsSR, "Date_Year")

arcpy.AddMessage( "deleted Date_Year field from RockTicketsSR feature class to keep same schema for copying updated data")
# Process: Convert Time Field
arcpy.ConvertTimeField_management(RockTicketsSR, "DATE_R", "'Not Used'", "Date_Year", "TEXT", "yyyy;1033;;")


arcpy.AddMessage( "created Date_Year field")
# Process: Make Query Table (3)
arcpy.MakeQueryTable_management(RockTicketsSR , QueryTable1, "USE_KEY_FIELDS", "RockTicketsSR.PROJ_Num", "", "Date_Year ="+"\'"+str(Year_Edit)+"\'")

arcpy.AddMessage( "Query out only the year you are calculating and dump the data into QueryTable1")
# Process: Copy Rows (3)
arcpy.CopyRows_management(QueryTable1, QueryTable_CopyRows, "")

arcpy.AddMessage( "copy rows from   QueryTable1 into QueryTable_copyRows of the year we are calculating")
# Process: Create Relationship Class
arcpy.CreateRelationshipClass_management(Rock_Shoulder_Right, QueryTable_CopyRows, Rock_Shoulder_Right_QueryTable_CopyRows, "SIMPLE", "QueryTable"+str(Year_Edit)+"_CopyRows", "Rock_Shoulder_Right", "NONE", "ONE_TO_MANY", "NONE", "RockPaved_Right", "RockTicketsSR_PROJ_Num", "", "")



# Process: Delete Field (3)
arcpy.DeleteField_management(Rock_Shoulder_Left, "RockTicketsSR_PROJ_Num;FREQUENCY;SUM_RockTicketsSR_ENGLISH_TONS;SUM_RockTicketsSR_AMT;LAST_RockTicketsSR_Rock_Class")

# Process: Create Relationship Class (2)
arcpy.CreateRelationshipClass_management(Rock_Shoulder_Left, QueryTable_CopyRows, Rock_Shoulder_Left_QueryTable_CopyRows, "SIMPLE", "QueryTable"+str(Year_Edit)+"_CopyRows", "Rock_Shoulder_Left", "NONE", "ONE_TO_MANY", "NONE", "RockPaved_Left", "RockTicketsSR_PROJ_Num", "", "")



# Process: Delete Field (6)
arcpy.DeleteField_management(Rock_Gravel, "RockTicketsSR_PROJ_Num;FREQUENCY;SUM_RockTicketsSR_ENGLISH_TONS;SUM_RockTicketsSR_AMT;LAST_RockTicketsSR_Rock_Class")

# Process: Create Relationship Class (3)
arcpy.CreateRelationshipClass_management(Rock_Gravel, QueryTable_CopyRows, Rock_GravelnoLock_QueryTable_CopyRows, "SIMPLE", "QueryTable"+str(Year_Edit)+"_CopyRows", "Rock_Gravel", "NONE", "ONE_TO_MANY", "NONE", "Rock_Gravel", "RockTicketsSR_PROJ_Num", "", "")




# Process: Summary Statistics (3)
arcpy.Statistics_analysis(QueryTable_CopyRows, SumStatstoPython, "RockTicketsSR_ENGLISH_TONS SUM;RockTicketsSR_AMT SUM;RockTicketsSR_Rock_Class LAST", "RockTicketsSR_PROJ_Num")



# Process: Join Field (4)
arcpy.JoinField_management(Rock_Shoulder_Right, "RockPaved_Right", SumStatstoPython, "RockTicketsSR_PROJ_Num", "")

# Process: Calculate Field (4)
arcpy.CalculateField_management(Rock_Shoulder_Right, "RockPRightMass"+str(Year_Edit), "!SUM_RockTicketsSR_ENGLISH_TONS!", "PYTHON", "")

arcpy.AddMessage( "calculate sum of rocks in Rock_Gravel_right and name the field RockPRightMass"+str(Year_Edit))
# Process: Delete Field
arcpy.DeleteField_management(Rock_Shoulder_Right, "RockTicketsSR_PROJ_Num;FREQUENCY;SUM_RockTicketsSR_ENGLISH_TONS;SUM_RockTicketsSR_AMT;LAST_RockTicketsSR_Rock_Class")




# Process: Join Field (2)
arcpy.JoinField_management(Rock_Shoulder_Left, "RockPaved_Left", SumStatstoPython, "RockTicketsSR_PROJ_Num", "")

# Process: Calculate Field (3)
arcpy.CalculateField_management(Rock_Shoulder_Left, "RockPLeftMass"+str(Year_Edit), "!SUM_RockTicketsSR_ENGLISH_TONS!", "PYTHON", "")

arcpy.AddMessage( "calculate sum of rocks in Rock_Gravel_left and name the field RockPLeftMass"+str(Year_Edit))
# Process: Delete Field (2)
arcpy.DeleteField_management(Rock_Shoulder_Left, "RockTicketsSR_PROJ_Num;FREQUENCY;SUM_RockTicketsSR_ENGLISH_TONS;SUM_RockTicketsSR_AMT;LAST_RockTicketsSR_Rock_Class")




# Process: Join Field (3)
arcpy.JoinField_management(Rock_Gravel, "Rock_Gravel", SumStatstoPython, "RockTicketsSR_PROJ_Num", "")

# Process: Calculate Field (6)
arcpy.CalculateField_management(Rock_Gravel, "RockGrMass"+str(Year_Edit), "!SUM_RockTicketsSR_ENGLISH_TONS!", "PYTHON", "")

arcpy.AddMessage( "calculate sum of rocks in Rock_Gravel and name the field RockGrMass"+str(Year_Edit))
# Process: Delete Field (7)
arcpy.DeleteField_management(Rock_Gravel, "RockTicketsSR_PROJ_Num;FREQUENCY;SUM_RockTicketsSR_ENGLISH_TONS;SUM_RockTicketsSR_AMT;LAST_RockTicketsSR_Rock_Class")

#Return license
arcpy.CheckInExtension("arcinfo")
